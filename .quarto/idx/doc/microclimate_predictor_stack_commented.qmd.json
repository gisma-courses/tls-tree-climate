{"title":"Microclimate Predictor Stack Tutorial","markdown":{"yaml":{"title":"Microclimate Predictor Stack Tutorial","author":"Chris Reudenbach, Lena Perzlmaier","date":"2025-07-16","format":{"html":{"toc":true,"toc-depth":3,"number-sections":true,"code-fold":true,"code-tools":true,"mermaid":{"enabled":true}}},"engine":"markdown"},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n\nThis tutorial documents the modular processing chain for deriving microclimate-relevant predictors from ALS (Airborne Laser Scanning) data.\\\nIt is based on the script `20_microclimate_predictor_stack.R`, which builds a raster predictor stack used in microclimate or ecological modeling.\n\n------------------------------------------------------------------------\n\n# 1. Overall Workflow Diagram\n\n```{mermaid}\nflowchart TD\n    LAS[\"LAS Input Data\"]\n    DEM[\"Normalize & Create DEM/DSM/CHM\"]\n    PM[\"Pixel-Level Metrics\"]\n    SEG[\"Tree Segmentation\"]\n\n    TOPO[\"Topographic Variables\"]\n    VOX[\"Voxel Metrics: VCI, LAD, Entropy\"]\n    LAD[\"LAD Profiles\"]\n    CLU[\"Tree Cluster Analysis\"]\n\n    MERGE[\"Merge: Predictor Stack\"]\n    OUT[\"Final Raster Predictor Stack\"]\n\n    LAS --> DEM\n    LAS --> PM\n    LAS --> SEG\n\n    DEM --> TOPO\n    PM --> VOX\n    SEG --> LAD\n    LAD --> CLU\n\n    TOPO --> MERGE\n    VOX --> MERGE\n    CLU --> MERGE\n\n    MERGE --> OUT\n```\n\nThis diagram shows the data flow:\n\n-   The LAS file is used in 3 parallel branches.\n-   Topographic, voxel, and tree-based metrics are computed independently.\n-   Finally, all are merged into one raster predictor stack.\n\n------------------------------------------------------------------------\n\n# 2. Project Setup\n\n``` r\n# Load required packages and environment\nrequire(envimaR)\nrequire(rprojroot)\n\n# Determine root directory of project (requires .Rproj or .here file)\nroot_folder <- find_rstudio_root_file()\n\n# Load envrmt list with all folder paths and EPSG settings\nsource(file.path(root_folder, \"src/000-rspatial-setup.R\"), echo = TRUE)\n```\n\n-   `envimaR` handles dynamic folder structures.\n-   `envrmt` contains paths like `path_lidar_raster`, `path_topo`, etc.\n-   `epsg_number`, `bbox` and other global spatial variables are set here.\n\n------------------------------------------------------------------------\n\n# 3. Normalizing the LAS Catalog\n\n``` r\nctg <- readLAScatalog(las_fileFN)\nctg_base <- normalize_height(ctg, knnidw(k = 6L, p = 2))\n```\n\n-   A LAS catalog is loaded and normalized.\n-   Ground points are removed to prepare for CHM and DSM creation.\n\n------------------------------------------------------------------------\n\n# 4. Terrain Models\n\n``` r\ndem <- rasterize_terrain(ctg, res = 1, knnidw(k = 6L, p = 2))\ndsm <- rasterize_canopy(ctg, res = 1, algorithm = pitfree())\nchm <- rasterize_canopy(ctg_base, res = 1, pitfree(c(0,2,5,10,15)))\n```\n\n-   **DEM** (Digital Elevation Model) is created from ground returns.\n-   **DSM** (Surface Model) and **CHM** (Canopy Height Model) from canopy points.\n\n------------------------------------------------------------------------\n\n# 5. Topographic Derivatives\n\n``` r\nslope <- terrain(dem, \"slope\")\naspect <- terrain(dem, \"aspect\")\nTPI <- terrain(dsm, \"TPI\")\n```\n\n-   Derived terrain parameters used for modeling light, moisture, and temperature.\n\n------------------------------------------------------------------------\n\n# 6. Pixel-Level Metrics\n\n``` r\npixel_stdmetrics <- pixel_metrics(ctg_base, .stdmetrics, res = 1)\npixel_LAD <- pixel_metrics(ctg_base, ~as.numeric(cv(LAD(Z, dz = 1, k = 0.87)$lad)), res = 1)\npixel_entropy <- pixel_metrics(ctg_base, ~as.numeric(entropy(Z, by = 1.0)), res = 1)\npixel_VCI <- pixel_metrics(ctg_base, ~as.numeric(VCI(Z, zmax = 40, by = 1.0)), res = 1)\n```\n\nThese voxel-based metrics represent vertical structure:\n\n-   **LAD** = Leaf Area Density\n-   **VCI** = Vertical Complexity Index\n-   **Entropy** = point height diversity\n-   `ipground` = intensity of ground points (optional)\n\n------------------------------------------------------------------------\n\n# 7. Tree Segmentation and Metrics\n\n``` r\nctg_seg <- segment_trees(ctg_base, li2012())\nhulls <- catalog_apply(ctg_seg, tree_fn)\nlad_vox <- lad.voxels(ctg_base, grain.size = 1, k = 0.87, maxP = 40)\n```\n\n-   Trees are segmented using the Li et al. (2012) method.\n-   `tree_fn` generates convex hulls or crown shapes.\n-   LAD profiles are voxelized and linked to hulls.\n\n------------------------------------------------------------------------\n\n# 8. Clustering Tree Profiles\n\n``` r\nclust_model <- KMeans_arma(data_clust, clusters = 10, n_iter = 500)\ntrees_lad$cluster <- predict_KMeans(data_clust, clust_model)\n```\n\n-   LAD metrics are dimensionally reduced (PCA or manually).\n-   Clustering assigns structural class per tree.\n-   Result is written as vector layer and rasterized.\n\n------------------------------------------------------------------------\n\n# 9. Predictor Stack Creation\n\n``` r\nforest_structure_metrics <- c(rast(topoFN), rast(pmetricsFN), rast(tree_clus_rasFN))\nwriteRaster(forest_structure_metrics, predstack_forest_metricsFN, overwrite = TRUE)\n```\n\n-   Combines topography, pixel metrics, and clusters into one multiband raster.\n\n------------------------------------------------------------------------\n\n# 10. Optional: Solar Irradiance via GRASS\n\n``` r\nlinkGRASS7(dem, gisdbase = root_folder, location = \"MOF2\")\nexecGRASS(\"r.sun.hourly\", parameters = list(...))\n```\n\n-   Optionally runs `r.sun.hourly` from GRASS to model solar radiation.\n-   Resulting hourly radiation maps can be included in predictor stacks.\n\n------------------------------------------------------------------------\n\n# Output Summary\n\n| Layer                       | Type      | Description                          |\n|-----------------------|------------------|-------------------------------|\n| `topo.tif`                  | Raster    | Terrain-derived variables            |\n| `all_pixel_metrics.tif`     | Raster    | Structural voxel statistics          |\n| `lad_hull_raster.tif`       | Raster    | LAD metrics aggregated to tree hulls |\n| `tree_cluster.tif`          | Raster    | Cluster class per tree segment       |\n| `pred_forest_structure.tif` | Raster    | Full predictor stack for modeling    |\n| `trees_lad_clean.rds`       | DataFrame | Tree-level statistics for analysis   |\n\n------------------------------------------------------------------------\n\n# Questions or Extensions\n\n-   Add modeling scripts (e.g. Random Forest, GLM, XGBoost)\n-   Visualize clusters with `tmap` or `leaflet`\n-   Combine with microclimate sensors or UAV data\n","srcMarkdownNoYaml":"\n\n# Introduction\n\nThis tutorial documents the modular processing chain for deriving microclimate-relevant predictors from ALS (Airborne Laser Scanning) data.\\\nIt is based on the script `20_microclimate_predictor_stack.R`, which builds a raster predictor stack used in microclimate or ecological modeling.\n\n------------------------------------------------------------------------\n\n# 1. Overall Workflow Diagram\n\n```{mermaid}\nflowchart TD\n    LAS[\"LAS Input Data\"]\n    DEM[\"Normalize & Create DEM/DSM/CHM\"]\n    PM[\"Pixel-Level Metrics\"]\n    SEG[\"Tree Segmentation\"]\n\n    TOPO[\"Topographic Variables\"]\n    VOX[\"Voxel Metrics: VCI, LAD, Entropy\"]\n    LAD[\"LAD Profiles\"]\n    CLU[\"Tree Cluster Analysis\"]\n\n    MERGE[\"Merge: Predictor Stack\"]\n    OUT[\"Final Raster Predictor Stack\"]\n\n    LAS --> DEM\n    LAS --> PM\n    LAS --> SEG\n\n    DEM --> TOPO\n    PM --> VOX\n    SEG --> LAD\n    LAD --> CLU\n\n    TOPO --> MERGE\n    VOX --> MERGE\n    CLU --> MERGE\n\n    MERGE --> OUT\n```\n\nThis diagram shows the data flow:\n\n-   The LAS file is used in 3 parallel branches.\n-   Topographic, voxel, and tree-based metrics are computed independently.\n-   Finally, all are merged into one raster predictor stack.\n\n------------------------------------------------------------------------\n\n# 2. Project Setup\n\n``` r\n# Load required packages and environment\nrequire(envimaR)\nrequire(rprojroot)\n\n# Determine root directory of project (requires .Rproj or .here file)\nroot_folder <- find_rstudio_root_file()\n\n# Load envrmt list with all folder paths and EPSG settings\nsource(file.path(root_folder, \"src/000-rspatial-setup.R\"), echo = TRUE)\n```\n\n-   `envimaR` handles dynamic folder structures.\n-   `envrmt` contains paths like `path_lidar_raster`, `path_topo`, etc.\n-   `epsg_number`, `bbox` and other global spatial variables are set here.\n\n------------------------------------------------------------------------\n\n# 3. Normalizing the LAS Catalog\n\n``` r\nctg <- readLAScatalog(las_fileFN)\nctg_base <- normalize_height(ctg, knnidw(k = 6L, p = 2))\n```\n\n-   A LAS catalog is loaded and normalized.\n-   Ground points are removed to prepare for CHM and DSM creation.\n\n------------------------------------------------------------------------\n\n# 4. Terrain Models\n\n``` r\ndem <- rasterize_terrain(ctg, res = 1, knnidw(k = 6L, p = 2))\ndsm <- rasterize_canopy(ctg, res = 1, algorithm = pitfree())\nchm <- rasterize_canopy(ctg_base, res = 1, pitfree(c(0,2,5,10,15)))\n```\n\n-   **DEM** (Digital Elevation Model) is created from ground returns.\n-   **DSM** (Surface Model) and **CHM** (Canopy Height Model) from canopy points.\n\n------------------------------------------------------------------------\n\n# 5. Topographic Derivatives\n\n``` r\nslope <- terrain(dem, \"slope\")\naspect <- terrain(dem, \"aspect\")\nTPI <- terrain(dsm, \"TPI\")\n```\n\n-   Derived terrain parameters used for modeling light, moisture, and temperature.\n\n------------------------------------------------------------------------\n\n# 6. Pixel-Level Metrics\n\n``` r\npixel_stdmetrics <- pixel_metrics(ctg_base, .stdmetrics, res = 1)\npixel_LAD <- pixel_metrics(ctg_base, ~as.numeric(cv(LAD(Z, dz = 1, k = 0.87)$lad)), res = 1)\npixel_entropy <- pixel_metrics(ctg_base, ~as.numeric(entropy(Z, by = 1.0)), res = 1)\npixel_VCI <- pixel_metrics(ctg_base, ~as.numeric(VCI(Z, zmax = 40, by = 1.0)), res = 1)\n```\n\nThese voxel-based metrics represent vertical structure:\n\n-   **LAD** = Leaf Area Density\n-   **VCI** = Vertical Complexity Index\n-   **Entropy** = point height diversity\n-   `ipground` = intensity of ground points (optional)\n\n------------------------------------------------------------------------\n\n# 7. Tree Segmentation and Metrics\n\n``` r\nctg_seg <- segment_trees(ctg_base, li2012())\nhulls <- catalog_apply(ctg_seg, tree_fn)\nlad_vox <- lad.voxels(ctg_base, grain.size = 1, k = 0.87, maxP = 40)\n```\n\n-   Trees are segmented using the Li et al. (2012) method.\n-   `tree_fn` generates convex hulls or crown shapes.\n-   LAD profiles are voxelized and linked to hulls.\n\n------------------------------------------------------------------------\n\n# 8. Clustering Tree Profiles\n\n``` r\nclust_model <- KMeans_arma(data_clust, clusters = 10, n_iter = 500)\ntrees_lad$cluster <- predict_KMeans(data_clust, clust_model)\n```\n\n-   LAD metrics are dimensionally reduced (PCA or manually).\n-   Clustering assigns structural class per tree.\n-   Result is written as vector layer and rasterized.\n\n------------------------------------------------------------------------\n\n# 9. Predictor Stack Creation\n\n``` r\nforest_structure_metrics <- c(rast(topoFN), rast(pmetricsFN), rast(tree_clus_rasFN))\nwriteRaster(forest_structure_metrics, predstack_forest_metricsFN, overwrite = TRUE)\n```\n\n-   Combines topography, pixel metrics, and clusters into one multiband raster.\n\n------------------------------------------------------------------------\n\n# 10. Optional: Solar Irradiance via GRASS\n\n``` r\nlinkGRASS7(dem, gisdbase = root_folder, location = \"MOF2\")\nexecGRASS(\"r.sun.hourly\", parameters = list(...))\n```\n\n-   Optionally runs `r.sun.hourly` from GRASS to model solar radiation.\n-   Resulting hourly radiation maps can be included in predictor stacks.\n\n------------------------------------------------------------------------\n\n# Output Summary\n\n| Layer                       | Type      | Description                          |\n|-----------------------|------------------|-------------------------------|\n| `topo.tif`                  | Raster    | Terrain-derived variables            |\n| `all_pixel_metrics.tif`     | Raster    | Structural voxel statistics          |\n| `lad_hull_raster.tif`       | Raster    | LAD metrics aggregated to tree hulls |\n| `tree_cluster.tif`          | Raster    | Cluster class per tree segment       |\n| `pred_forest_structure.tif` | Raster    | Full predictor stack for modeling    |\n| `trees_lad_clean.rds`       | DataFrame | Tree-level statistics for analysis   |\n\n------------------------------------------------------------------------\n\n# Questions or Extensions\n\n-   Add modeling scripts (e.g. Random Forest, GLM, XGBoost)\n-   Visualize clusters with `tmap` or `leaflet`\n-   Combine with microclimate sensors or UAV data\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":true,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true,"link-external-filter":"^(?:http:|https:)\\/\\/www\\.quarto\\.org\\/custom"},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../css/styles.css"],"toc":true,"toc-depth":3,"number-sections":true,"output-file":"microclimate_predictor_stack_commented.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","comments":{"utterances":{"repo":"gisma-courses/TLS-tree-climate"}},"theme":{"light":"lumen","dark":["lumen","../css/theme-dark.scss"]},"code-background":true,"code-copy":true,"title":"Microclimate Predictor Stack Tutorial","author":"Chris Reudenbach, Lena Perzlmaier","date":"2025-07-16","mermaid":{"enabled":true}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}