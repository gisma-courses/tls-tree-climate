{"title":"Helper Functions for Microclimate Predictor Stack","markdown":{"yaml":{"title":"Helper Functions for Microclimate Predictor Stack","author":"Chris Reudenbach","date":"2025-07-16","format":{"html":{"toc":true,"toc-depth":2,"number-sections":true,"code-fold":true,"code-tools":true}},"engine":"knitr"},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n\nThis document explains the **custom helper functions** used in the `microclimate_predictor_stack.R` script for preprocessing and analyzing LiDAR data in R. The functions support pixel-level metrics computation, raster template creation, VRT mosaicking, and tree hull extraction.\n\n------------------------------------------------------------------------\n\n# .stdmetrics()\n\n``` r\n#' @title .stdmetrics\n#' @description Berechnet Standardmetriken für LiDAR Rasterzellen\n.stdmetrics <- function(z, i, ...) {\n  return(list(\n    zmax = max(z, na.rm = TRUE),            # Maximum height\n    zmean = mean(z, na.rm = TRUE),          # Mean height\n    zsd = sd(z, na.rm = TRUE),              # Standard deviation of heights\n    zkurto = moments::kurtosis(z, na.rm = TRUE), # Kurtosis (peakedness of distribution)\n    zskew = moments::skewness(z, na.rm = TRUE),  # Skewness (asymmetry)\n    zq25 = quantile(z, 0.25, na.rm = TRUE), # 25th percentile\n    zq50 = quantile(z, 0.5, na.rm = TRUE),  # Median height\n    zq75 = quantile(z, 0.75, na.rm = TRUE), # 75th percentile\n    zpulse = length(z)                      # Number of returns (pulse count)\n  ))\n}\n```\n\nUsed to derive **standard height-based metrics** from LiDAR returns per raster cell using `pixel_metrics()`.\n\n------------------------------------------------------------------------\n\n# get_vrt_img()\n\n``` r\n#' @title get_vrt_img\n#' @description Creates a VRT from multiple GeoTIFF files in a directory\nget_vrt_img <- function(name, path, pattern) {\n  tifs <- list.files(path = path, pattern = paste0(pattern, \".tif$\"), full.names = TRUE)\n  vrt <- file.path(path, paste0(name, \".vrt\"))\n  if (file.exists(vrt)) file.remove(vrt)\n  gdal_utils(util = \"buildvrt\", source = tifs, destination = vrt)\n  return(vrt)\n}\n```\n\nUsed to dynamically generate a **VRT (virtual raster stack)** from multiple `.tif` files with a matching pattern, e.g. `\"lad_metrics\"`.\n\n------------------------------------------------------------------------\n\n# tree_fn()\n\n``` r\n#' @title tree_fn\n#' @description Creates convex hulls from segmented trees in LAS catalogs\ntree_fn <- function(las, ...) {\n  if (is.empty(las)) return(NULL)                   # Skip if empty\n  las <- filter_poi(las, !is.na(treeID))            # Keep only trees\n  if (npoints(las) == 0) return(NULL)               # Skip if no points\n  dt <- data.table::as.data.table(las@data)\n  dt <- dt[, .(X = mean(X), Y = mean(Y)), by = treeID]  # Mean location per tree\n  points_sf <- st_as_sf(dt, coords = c(\"X\", \"Y\"), crs = sf::st_crs(las))\n  hulls <- st_convex_hull(st_union(points_sf))      # Create unified convex hull\n  return(hulls)\n}\n```\n\nUsed with `catalog_apply()` to derive **convex hull geometries** from segmented tree point clouds.\n\n------------------------------------------------------------------------\n\n# template_raster()\n\n``` r\n#' @title template_raster\n#' @description Creates an empty raster template based on bounding box and resolution\ntemplate_raster <- function(bbox, crs, res = 1.0) {\n  if (inherits(bbox, \"sf\")) bbox <- st_bbox(bbox)\n  r <- terra::rast(xmin = bbox[\"xmin\"], xmax = bbox[\"xmax\"],\n                   ymin = bbox[\"ymin\"], ymax = bbox[\"ymax\"],\n                   resolution = res, crs = crs)\n  return(r)\n}\n```\n\nGenerates a blank `terra::rast` object for rasterizing vector geometries such as LAD polygons or tree hulls.\n\n------------------------------------------------------------------------\n","srcMarkdownNoYaml":"\n\n# Introduction\n\nThis document explains the **custom helper functions** used in the `microclimate_predictor_stack.R` script for preprocessing and analyzing LiDAR data in R. The functions support pixel-level metrics computation, raster template creation, VRT mosaicking, and tree hull extraction.\n\n------------------------------------------------------------------------\n\n# .stdmetrics()\n\n``` r\n#' @title .stdmetrics\n#' @description Berechnet Standardmetriken für LiDAR Rasterzellen\n.stdmetrics <- function(z, i, ...) {\n  return(list(\n    zmax = max(z, na.rm = TRUE),            # Maximum height\n    zmean = mean(z, na.rm = TRUE),          # Mean height\n    zsd = sd(z, na.rm = TRUE),              # Standard deviation of heights\n    zkurto = moments::kurtosis(z, na.rm = TRUE), # Kurtosis (peakedness of distribution)\n    zskew = moments::skewness(z, na.rm = TRUE),  # Skewness (asymmetry)\n    zq25 = quantile(z, 0.25, na.rm = TRUE), # 25th percentile\n    zq50 = quantile(z, 0.5, na.rm = TRUE),  # Median height\n    zq75 = quantile(z, 0.75, na.rm = TRUE), # 75th percentile\n    zpulse = length(z)                      # Number of returns (pulse count)\n  ))\n}\n```\n\nUsed to derive **standard height-based metrics** from LiDAR returns per raster cell using `pixel_metrics()`.\n\n------------------------------------------------------------------------\n\n# get_vrt_img()\n\n``` r\n#' @title get_vrt_img\n#' @description Creates a VRT from multiple GeoTIFF files in a directory\nget_vrt_img <- function(name, path, pattern) {\n  tifs <- list.files(path = path, pattern = paste0(pattern, \".tif$\"), full.names = TRUE)\n  vrt <- file.path(path, paste0(name, \".vrt\"))\n  if (file.exists(vrt)) file.remove(vrt)\n  gdal_utils(util = \"buildvrt\", source = tifs, destination = vrt)\n  return(vrt)\n}\n```\n\nUsed to dynamically generate a **VRT (virtual raster stack)** from multiple `.tif` files with a matching pattern, e.g. `\"lad_metrics\"`.\n\n------------------------------------------------------------------------\n\n# tree_fn()\n\n``` r\n#' @title tree_fn\n#' @description Creates convex hulls from segmented trees in LAS catalogs\ntree_fn <- function(las, ...) {\n  if (is.empty(las)) return(NULL)                   # Skip if empty\n  las <- filter_poi(las, !is.na(treeID))            # Keep only trees\n  if (npoints(las) == 0) return(NULL)               # Skip if no points\n  dt <- data.table::as.data.table(las@data)\n  dt <- dt[, .(X = mean(X), Y = mean(Y)), by = treeID]  # Mean location per tree\n  points_sf <- st_as_sf(dt, coords = c(\"X\", \"Y\"), crs = sf::st_crs(las))\n  hulls <- st_convex_hull(st_union(points_sf))      # Create unified convex hull\n  return(hulls)\n}\n```\n\nUsed with `catalog_apply()` to derive **convex hull geometries** from segmented tree point clouds.\n\n------------------------------------------------------------------------\n\n# template_raster()\n\n``` r\n#' @title template_raster\n#' @description Creates an empty raster template based on bounding box and resolution\ntemplate_raster <- function(bbox, crs, res = 1.0) {\n  if (inherits(bbox, \"sf\")) bbox <- st_bbox(bbox)\n  r <- terra::rast(xmin = bbox[\"xmin\"], xmax = bbox[\"xmax\"],\n                   ymin = bbox[\"ymin\"], ymax = bbox[\"ymax\"],\n                   resolution = res, crs = crs)\n  return(r)\n}\n```\n\nGenerates a blank `terra::rast` object for rasterizing vector geometries such as LAD polygons or tree hulls.\n\n------------------------------------------------------------------------\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":true,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true,"link-external-filter":"^(?:http:|https:)\\/\\/www\\.quarto\\.org\\/custom"},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../css/styles.css"],"toc":true,"toc-depth":2,"number-sections":true,"output-file":"helper_functions.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","comments":{"utterances":{"repo":"gisma-courses/TLS-tree-climate"}},"theme":{"light":"lumen","dark":"lumen"},"code-background":true,"code-copy":true,"title":"Helper Functions for Microclimate Predictor Stack","author":"Chris Reudenbach","date":"2025-07-16"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}